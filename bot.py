import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
MATERIAL_TEXT = "üìö –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: [–ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç]"
POLL_QUESTION = "–ö–∞–∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª?"
POLL_OPTIONS = ["–û—Ç–ª–∏—á–Ω–æ!", "–•–æ—Ä–æ—à–æ", "–°—Ä–µ–¥–Ω–µ", "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å"]

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

db_path = "bot_database.db"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        'CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT)')
    cursor.execute(
        'CREATE TABLE stats (date TEXT, materials_sent INTEGER, surveys_answered INTEGER, support_requests INTEGER)')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î


def add_user(user_id, username):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def get_users():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users")
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏


def update_stat(column):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        f"INSERT INTO stats (date, {column}) VALUES (DATE('now'), 1) ON CONFLICT(date) DO UPDATE SET {column} = {column} + 1")
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    add_user(message.from_user.id, message.from_user.username)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.", reply_markup=keyboard)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å


@dp.message_handler(lambda message: message.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    update_stat("support_requests")
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")

# –†–∞—Å—Å—ã–ª–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞


async def send_daily_material():
    users = get_users()
    for user in users:
        try:
            await bot.send_message(user, MATERIAL_TEXT)
        except:
            pass
    update_stat("materials_sent")

# –û–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è


async def send_daily_poll():
    users = get_users()
    for user in users:
        try:
            await bot.send_poll(user, POLL_QUESTION, POLL_OPTIONS, is_anonymous=False)
        except:
            pass
    update_stat("surveys_answered")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å


@dp.poll_answer_handler()
async def poll_answer_handler(poll_answer: types.PollAnswer):
    update_stat("surveys_answered")

# –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)


@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute(
            "SELECT SUM(materials_sent), SUM(surveys_answered), SUM(support_requests) FROM stats")
        result = cursor.fetchone()
        materials_sent = result[0] if result[0] else 0
        surveys_answered = result[1] if result[1] else 0
        support_requests = result[2] if result[2] else 0
        conn.close()

        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n" \
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ:* {total_users}\n" \
            f"üì© *–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª—É—á–∏–ª–æ:* {materials_sent}\n" \
            f"‚úÖ *–û—Ç–≤–µ—Ç–∏–ª–æ –Ω–∞ –æ–ø—Ä–æ—Å:* {surveys_answered}\n" \
            f"üÜò *–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:* {support_requests}"

        await message.reply(stats_text, parse_mode="Markdown")
    else:
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler.add_job(send_daily_material, "cron", hour=9,
                  minute=0)  # –ú–∞—Ç–µ—Ä–∏–∞–ª –≤ 9 —É—Ç—Ä–∞
scheduler.add_job(send_daily_poll, "cron", hour=20, minute=0)  # –û–ø—Ä–æ—Å –≤ 20:00

if __name__ == '__main__':
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
